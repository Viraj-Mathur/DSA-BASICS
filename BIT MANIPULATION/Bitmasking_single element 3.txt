BIT MASKING IN SINGLE ELEMENT 3

Let's say we have an array: [1, 2, 1, 3, 2, 5]
Our goal is to find the two numbers that appear only once: 3 and 5.

XOR all numbers:
1 ^ 2 ^ 1 ^ 3 ^ 2 ^ 5
= (1 ^ 1) ^ (2 ^ 2) ^ 3 ^ 5  (rearranging)
= 0 ^ 0 ^ 3 ^ 5  (a number XOR itself is 0)
= 3 ^ 5
= 110 (in binary)
So, res = 110 (binary) = 6 (decimal)
Create the mask:
res = 110
-res = 010 (two's complement of 110)
mask = res & (-res) = 110 & 010 = 010
The mask is 010, which has only the rightmost set bit of res.
Use the mask to separate numbers:
We'll XOR all numbers that have this bit set (the second bit from right).
1 = 001  (mask & 1 = 0, ignore)
2 = 010  (mask & 2 != 0, include)
1 = 001  (mask & 1 = 0, ignore)
3 = 011  (mask & 3 != 0, include)
2 = 010  (mask & 2 != 0, include)
5 = 101  (mask & 5 = 0, ignore)
Find the first number:
XOR the numbers we included: 2 ^ 3 ^ 2 = 3
So, first = 3
Find the second number:
second = res ^ first = 6 ^ 3 = 5

Thus, we've found our two unique numbers: 3 and 5.
Let's break down why this works:

The XOR of all numbers (res) gives us 3 ^ 5.
3 ^ 5 = 011 ^ 101 = 110
The mask (010) identifies a bit where 3 and 5 differ.
When we use this mask, we separate 3 (011) and 5 (101) into different groups.
XORing all numbers in one group cancels out the pairs and leaves us with one of our unique numbers.
XORing this result with res gives us the other unique number.

This method is efficient because it uses the properties of XOR to cancel out the pairs and identify the unique numbers, all in a single pass through the array.

Show did we found out we need a mask of res & (-res) only give intuition like why does it need to get the rightmost digit to 1

Why we need a mask:
After XORing all numbers, we have res = a ^ b, where a and b are our two unique numbers. We need a way to separate these numbers. The key is to find a bit where a and b differ.
Why the rightmost set bit:
Any set bit in res indicates a position where a and b differ. We choose the rightmost set bit because:

It's guaranteed to exist (since a and b are different)
It's easy to isolate using a simple bitwise trick
Any differing bit would work, but the rightmost is convenient


How res & (-res) works:
Let's look at an example. Say res = 110 in binary:
res      = 110
-res     = 010 (two's complement)
res & (-res) = 010
The two's complement of a number flips all bits up to and including the rightmost set bit. When we AND this with the original number, only the rightmost set bit survives.
Why this is useful:

This bit is definitely different in a and b
It gives us a simple way to divide all numbers into two groups
One group will contain a, the other will contain b


Intuition:
Think of it as finding the "least significant difference" between a and b. It's like asking, "What's the smallest binary place where these numbers disagree?"
Why not other methods:

We could use other methods to find a differing bit, but this is particularly elegant and efficient
It works in a single operation, regardless of the number's size



In essence, res & (-res) is a clever bitwise trick that quickly identifies a point of difference between our two unique numbers, giving us a foothold to separate them.

